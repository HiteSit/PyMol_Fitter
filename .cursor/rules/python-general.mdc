---
description: 
globs: **/.py
alwaysApply: false
---
# Python Style Guide & Documentation Standards
**Super Rule**
While standardizing the code, please be extremely careful to not impact the overall coding style as well as the overall functionality.

## Code Style

- **Formatting**
  - Follow [Black](mdc:https:/black.readthedocs.io/en/stable) code formatting
  - Use [isort](mdc:https:/pycqa.github.io/isort) for import sorting
  - Maximum line length of 88 characters (Black default)

- **Naming Conventions (PEP 8)**
  - `snake_case` for functions and variables
  - `PascalCase` for classes
  - `UPPER_CASE` for constants
  - `_leading_underscore` for private attributes/methods

- **Imports**
  - Use absolute imports over relative imports
  - Group imports in the following order:
    1. Standard library imports
    2. Third-party imports
    3. Local application imports
  - One import per line

- **Best Practices**
  - Prefer list/dict comprehensions over loops when appropriate
  - Use context managers (`with` statements) for resource management
  - Prefer f-strings for string formatting
  - Limit function length to 50 lines or less

## Type Hints

- Use type hints for all function parameters and return values
- Import types from the `typing` module
- Use `Optional[Type]` instead of `Type | None`
- Use `TypeVar` for generic types
- Define custom types in `types.py`
- Use `Protocol` for duck typing
- Use `Literal` for constrained string values
- Use `Union` for multiple possible types
- Add `# type: ignore` comments only when absolutely necessary

```python
from typing import Dict, List, Optional, TypeVar, Union

T = TypeVar('T')

def process_data(items: List[T], config: Optional[Dict[str, str]] = None) -> Union[List[T], Dict[str, T]]:
    """Process a list of items according to the given configuration.

    Args:
        items: A list of items to process
        config: Optional configuration parameters

    Returns:
        Processed items as a list or dictionary
    """
    # Implementation
```

## Documentation

### Docstring Format

Use [Google style docstrings](mdc:https:/sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html) with Markdown formatting:

```python
def function_name(param1: type, param2: type) -> return_type:
    """Short description of function's purpose.

    Longer description with more details about functionality,
    implementation notes, or usage examples if needed.

    Args:
        param1: Description of first parameter
        param2: Description of second parameter

    Returns:
        Description of the return value

    Raises:
        ExceptionType: When and why this exception is raised

    Examples:
        ```python
        result = function_name("example", 42)
        print(result)  # Expected output
        ```
    """
```

### Module Documentation

Each module should begin with a docstring explaining its purpose:

```python
"""
Module Name
===========

Brief description of the module.

This module provides utilities for...

Typical usage example:
    ```python
    from package import module
    result = module.function("example")
    ```
"""
```

### Class Documentation

Document classes with:

```python
class ClassName:
    """Short description of the class.

    Longer description providing details about the class's purpose,
    behavior, and usage patterns.

    Attributes:
        attr1: Description of attribute 1
        attr2: Description of attribute 2

    Examples:
        ```python
        instance = ClassName(param1, param2)
        result = instance.method()
        ```
    """
```

## Further Reading

- [PEP 8](mdc:https:/www.python.org/dev/peps/pep-0008) - Style Guide for Python Code
- [PEP 484](mdc:https:/www.python.org/dev/peps/pep-0484) - Type Hints
- [Google Python Style Guide](mdc:https:/google.github.io/styleguide/pyguide.html)